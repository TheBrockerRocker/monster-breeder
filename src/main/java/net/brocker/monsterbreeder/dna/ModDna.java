package net.brocker.monsterbreeder.dna;

import net.brocker.monsterbreeder.MonsterBreeder;
import net.brocker.monsterbreeder.api.Dna;
import net.brocker.monsterbreeder.api.registry.DnaRegistry;
import net.minecraft.entity.EntityType;
import net.minecraft.util.Identifier;

public class ModDna {
	public static Identifier UNKNOWN = Identifier.of(MonsterBreeder.MOD_ID, "unknown");
	public static Identifier ZOMBIE = Identifier.of(MonsterBreeder.MOD_ID, "zombie");
	public static Identifier SKELETON = Identifier.of(MonsterBreeder.MOD_ID, "skeleton");
	public static Identifier CREEPER = Identifier.of(MonsterBreeder.MOD_ID, "creeper");
	public static Identifier BOGGED = Identifier.of(MonsterBreeder.MOD_ID, "bogged");
	public static Identifier BAT = Identifier.of(MonsterBreeder.MOD_ID, "bat");
	public static Identifier FROG = Identifier.of(MonsterBreeder.MOD_ID, "frog");
	public static Identifier SQUID = Identifier.of(MonsterBreeder.MOD_ID, "squid");
	public static Identifier GLOW_SQUID = Identifier.of(MonsterBreeder.MOD_ID, "glow_squid");
	public static Identifier SNOW_GOLEM = Identifier.of(MonsterBreeder.MOD_ID, "snow_golem");
	public static Identifier OCELOT = Identifier.of(MonsterBreeder.MOD_ID, "ocelot");
	public static Identifier SNIFFER = Identifier.of(MonsterBreeder.MOD_ID, "sniffer");
	public static Identifier SKELETON_HORSE = Identifier.of(MonsterBreeder.MOD_ID, "skeleton_horse");
	public static Identifier ARMADILLO = Identifier.of(MonsterBreeder.MOD_ID, "armadillo");
	public static Identifier VILLAGER = Identifier.of(MonsterBreeder.MOD_ID, "villager");
	public static Identifier AXOLOTL = Identifier.of(MonsterBreeder.MOD_ID, "axolotl");
	public static Identifier CAMEL = Identifier.of(MonsterBreeder.MOD_ID, "camel");
	public static Identifier CAT = Identifier.of(MonsterBreeder.MOD_ID, "cat");
	public static Identifier CHICKEN = Identifier.of(MonsterBreeder.MOD_ID, "chicken");
	public static Identifier COD = Identifier.of(MonsterBreeder.MOD_ID, "cod");
	public static Identifier COW = Identifier.of(MonsterBreeder.MOD_ID, "cow");
	public static Identifier DONKEY = Identifier.of(MonsterBreeder.MOD_ID, "donkey");
	public static Identifier MOOSHROOM = Identifier.of(MonsterBreeder.MOD_ID, "donkey");
	public static Identifier MULE = Identifier.of(MonsterBreeder.MOD_ID, "mule");
	public static Identifier PARROT = Identifier.of(MonsterBreeder.MOD_ID, "parrot");
	public static Identifier PIG = Identifier.of(MonsterBreeder.MOD_ID, "pig");
	public static Identifier PUFFERFISH = Identifier.of(MonsterBreeder.MOD_ID, "pufferfish");
	public static Identifier RABBIT = Identifier.of(MonsterBreeder.MOD_ID, "rabbit");
	public static Identifier SALMON = Identifier.of(MonsterBreeder.MOD_ID, "salmon");
	public static Identifier SHEEP = Identifier.of(MonsterBreeder.MOD_ID, "sheep");
	public static Identifier STRIDER = Identifier.of(MonsterBreeder.MOD_ID, "strider");
	public static Identifier TADPOLE = Identifier.of(MonsterBreeder.MOD_ID, "tadpole");
	public static Identifier TROPICAL_FISH = Identifier.of(MonsterBreeder.MOD_ID, "tropical_fish");
	public static Identifier TURTLE = Identifier.of(MonsterBreeder.MOD_ID, "turtle");
	public static Identifier WANDERING_TRADER = Identifier.of(MonsterBreeder.MOD_ID, "wandering_trader");
	public static Identifier BEE = Identifier.of(MonsterBreeder.MOD_ID, "bee");
	public static Identifier CAVE_SPIDER = Identifier.of(MonsterBreeder.MOD_ID, "cave_spider");
	public static Identifier DOLPHIN = Identifier.of(MonsterBreeder.MOD_ID, "dolphin");
	public static Identifier DROWNED = Identifier.of(MonsterBreeder.MOD_ID, "drowned");
	public static Identifier ENDERMAN = Identifier.of(MonsterBreeder.MOD_ID, "enderman");
	public static Identifier FOX = Identifier.of(MonsterBreeder.MOD_ID, "fox");
	public static Identifier GOAT = Identifier.of(MonsterBreeder.MOD_ID, "goat");
	public static Identifier IRON_GOLEM = Identifier.of(MonsterBreeder.MOD_ID, "iron_golem");
	public static Identifier LLAMA = Identifier.of(MonsterBreeder.MOD_ID, "llama");
	public static Identifier PANDA = Identifier.of(MonsterBreeder.MOD_ID, "panda");
	public static Identifier POLAR_BEAR = Identifier.of(MonsterBreeder.MOD_ID, "polar_bear");
	public static Identifier TRADER_LLAMA = Identifier.of(MonsterBreeder.MOD_ID, "trader_llama");
	public static Identifier WOLF = Identifier.of(MonsterBreeder.MOD_ID, "wolf");
	public static Identifier ZOMBIFIED_PIGLIN = Identifier.of(MonsterBreeder.MOD_ID, "zombified_piglin");
	public static Identifier BLAZE = Identifier.of(MonsterBreeder.MOD_ID, "blaze");
	public static Identifier BREEZE = Identifier.of(MonsterBreeder.MOD_ID, "breeze");
	public static Identifier ELDER_GUARDIAN = Identifier.of(MonsterBreeder.MOD_ID, "elder_guardian");
	public static Identifier ENDERMITE = Identifier.of(MonsterBreeder.MOD_ID, "endermite");
	public static Identifier EVOKER = Identifier.of(MonsterBreeder.MOD_ID, "evoker");
	public static Identifier GHAST = Identifier.of(MonsterBreeder.MOD_ID, "ghast");
	public static Identifier GUARDIAN = Identifier.of(MonsterBreeder.MOD_ID, "guardian");
	public static Identifier HOGLIN = Identifier.of(MonsterBreeder.MOD_ID, "hoglin");
	public static Identifier HUSK = Identifier.of(MonsterBreeder.MOD_ID, "husk");
	public static Identifier MAGMA_CUBE = Identifier.of(MonsterBreeder.MOD_ID, "magma_cube");
	public static Identifier PHANTOM = Identifier.of(MonsterBreeder.MOD_ID, "phantom");
	public static Identifier PIGLIN_BRUTE = Identifier.of(MonsterBreeder.MOD_ID, "piglin_brute");
	public static Identifier PILLAGER = Identifier.of(MonsterBreeder.MOD_ID, "pillager");
	public static Identifier RAVAGER = Identifier.of(MonsterBreeder.MOD_ID, "ravager");
	public static Identifier SHULKER = Identifier.of(MonsterBreeder.MOD_ID, "shulker");
	public static Identifier SILVERFISH = Identifier.of(MonsterBreeder.MOD_ID, "silverfish");
	public static Identifier SLIME = Identifier.of(MonsterBreeder.MOD_ID, "slime");
	public static Identifier STRAY = Identifier.of(MonsterBreeder.MOD_ID, "stray");
	public static Identifier VEX = Identifier.of(MonsterBreeder.MOD_ID, "vex");
	public static Identifier VINDICATOR = Identifier.of(MonsterBreeder.MOD_ID, "vindicator");
	public static Identifier WARDEN = Identifier.of(MonsterBreeder.MOD_ID, "warden");
	public static Identifier WITCH = Identifier.of(MonsterBreeder.MOD_ID, "witch");
	public static Identifier WITHER_SKELETON = Identifier.of(MonsterBreeder.MOD_ID, "wither_skeleton");
	public static Identifier ZOGLIN = Identifier.of(MonsterBreeder.MOD_ID, "zoglin");
	public static Identifier ZOMBIE_VILLAGER = Identifier.of(MonsterBreeder.MOD_ID, "zombie_villager");


	public static void registerModDna() {
		MonsterBreeder.LOGGER.info("Registering ModDna for " + MonsterBreeder.MOD_ID);

		DnaRegistry registry = DnaRegistry.INSTANCE;
		registry.register(UNKNOWN, new Dna("dna.monsterbreeder.unknown", false));
		registry.register(ZOMBIE, new Dna(EntityType.ZOMBIE.getTranslationKey(), false, EntityType.ZOMBIE));
		registry.register(SKELETON, new Dna(EntityType.SKELETON.getTranslationKey(), false, EntityType.SKELETON));
		registry.register(CREEPER, new Dna(EntityType.CREEPER.getTranslationKey(), false, EntityType.CREEPER));
		registry.register(BAT, new Dna(EntityType.BAT.getTranslationKey(), false, EntityType.BAT));
		registry.register(FROG, new Dna(EntityType.FROG.getTranslationKey(), false, EntityType.FROG));
		registry.register(SQUID, new Dna(EntityType.SQUID.getTranslationKey(), false, EntityType.SQUID));
		registry.register(GLOW_SQUID, new Dna(EntityType.GLOW_SQUID.getTranslationKey(), false, EntityType.GLOW_SQUID));
		registry.register(BOGGED, new Dna(EntityType.BOGGED.getTranslationKey(), false, EntityType.BOGGED));
		registry.register(SNOW_GOLEM, new Dna(EntityType.SNOW_GOLEM.getTranslationKey(), false, EntityType.SNOW_GOLEM));
		registry.register(OCELOT, new Dna(EntityType.OCELOT.getTranslationKey(), false, EntityType.OCELOT));
		registry.register(SNIFFER, new Dna(EntityType.SNIFFER.getTranslationKey(), false, EntityType.SNIFFER));
		registry.register(SKELETON_HORSE, new Dna(EntityType.SKELETON_HORSE.getTranslationKey(), false, EntityType.SKELETON_HORSE));
		registry.register(ARMADILLO, new Dna(EntityType.ARMADILLO.getTranslationKey(), false, EntityType.ARMADILLO));
		registry.register(VILLAGER, new Dna(EntityType.VILLAGER.getTranslationKey(), false, EntityType.VILLAGER));
		registry.register(AXOLOTL, new Dna(EntityType.AXOLOTL.getTranslationKey(), false, EntityType.AXOLOTL));
		registry.register(CAMEL, new Dna(EntityType.CAMEL.getTranslationKey(), false, EntityType.CAMEL));
		registry.register(CAT, new Dna(EntityType.CAT.getTranslationKey(), false, EntityType.CAT));
		registry.register(CHICKEN, new Dna(EntityType.CHICKEN.getTranslationKey(), false, EntityType.CHICKEN));
		registry.register(COD, new Dna(EntityType.COD.getTranslationKey(), false, EntityType.COD));
		registry.register(COW, new Dna(EntityType.COW.getTranslationKey(), false, EntityType.COW));
		registry.register(DONKEY, new Dna(EntityType.DONKEY.getTranslationKey(), false, EntityType.DONKEY));
		registry.register(MOOSHROOM, new Dna(EntityType.MOOSHROOM.getTranslationKey(), false, EntityType.MOOSHROOM));
		registry.register(MULE, new Dna(EntityType.MULE.getTranslationKey(), false, EntityType.MULE));
		registry.register(PARROT, new Dna(EntityType.PARROT.getTranslationKey(), false, EntityType.PARROT));
		registry.register(PIG, new Dna(EntityType.PIG.getTranslationKey(), false, EntityType.PIG));
		registry.register(PUFFERFISH, new Dna(EntityType.PUFFERFISH.getTranslationKey(), false, EntityType.PUFFERFISH));
		registry.register(RABBIT, new Dna(EntityType.RABBIT.getTranslationKey(), false, EntityType.RABBIT));
		registry.register(SALMON, new Dna(EntityType.SALMON.getTranslationKey(), false, EntityType.SALMON));
		registry.register(SHEEP, new Dna(EntityType.SHEEP.getTranslationKey(), false, EntityType.SHEEP));
		registry.register(STRIDER, new Dna(EntityType.STRIDER.getTranslationKey(), false, EntityType.STRIDER));
		registry.register(TADPOLE, new Dna(EntityType.TADPOLE.getTranslationKey(), false, EntityType.TADPOLE));
		registry.register(TROPICAL_FISH, new Dna(EntityType.TROPICAL_FISH.getTranslationKey(), false, EntityType.TROPICAL_FISH));
		registry.register(TURTLE, new Dna(EntityType.TURTLE.getTranslationKey(), false, EntityType.TURTLE));
		registry.register(WANDERING_TRADER, new Dna(EntityType.WANDERING_TRADER.getTranslationKey(), false, EntityType.WANDERING_TRADER));
		registry.register(BEE, new Dna(EntityType.BEE.getTranslationKey(), false, EntityType.BEE));
		registry.register(CAVE_SPIDER, new Dna(EntityType.CAVE_SPIDER.getTranslationKey(), false, EntityType.CAVE_SPIDER));
		registry.register(DOLPHIN, new Dna(EntityType.DOLPHIN.getTranslationKey(), false, EntityType.DOLPHIN));
		registry.register(DROWNED, new Dna(EntityType.DROWNED.getTranslationKey(), false, EntityType.DROWNED));
		registry.register(ENDERMAN, new Dna(EntityType.ENDERMAN.getTranslationKey(), false, EntityType.ENDERMAN));
		registry.register(FOX, new Dna(EntityType.FOX.getTranslationKey(), false, EntityType.FOX));
		registry.register(GOAT, new Dna(EntityType.GOAT.getTranslationKey(), false, EntityType.GOAT));
		registry.register(IRON_GOLEM, new Dna(EntityType.IRON_GOLEM.getTranslationKey(), false, EntityType.IRON_GOLEM));
		registry.register(LLAMA, new Dna(EntityType.LLAMA.getTranslationKey(), false, EntityType.LLAMA));
		registry.register(PANDA, new Dna(EntityType.PANDA.getTranslationKey(), false, EntityType.PANDA));
		registry.register(POLAR_BEAR, new Dna(EntityType.POLAR_BEAR.getTranslationKey(), false, EntityType.POLAR_BEAR));
		registry.register(TRADER_LLAMA, new Dna(EntityType.TRADER_LLAMA.getTranslationKey(), false, EntityType.TRADER_LLAMA));
		registry.register(WOLF, new Dna(EntityType.WOLF.getTranslationKey(), false, EntityType.WOLF));
		registry.register(ZOMBIFIED_PIGLIN, new Dna(EntityType.ZOMBIFIED_PIGLIN.getTranslationKey(), false, EntityType.ZOMBIFIED_PIGLIN));
		registry.register(BLAZE, new Dna(EntityType.BLAZE.getTranslationKey(), false, EntityType.BLAZE));
		registry.register(BREEZE, new Dna(EntityType.BREEZE.getTranslationKey(), false, EntityType.BREEZE));
		registry.register(ELDER_GUARDIAN, new Dna(EntityType.ELDER_GUARDIAN.getTranslationKey(), false, EntityType.ELDER_GUARDIAN));
		registry.register(ENDERMITE, new Dna(EntityType.ENDERMITE.getTranslationKey(), false, EntityType.ENDERMITE));
		registry.register(EVOKER, new Dna(EntityType.EVOKER.getTranslationKey(), false, EntityType.EVOKER));
		registry.register(GHAST, new Dna(EntityType.GHAST.getTranslationKey(), false, EntityType.GHAST));
		registry.register(GUARDIAN, new Dna(EntityType.GUARDIAN.getTranslationKey(), false, EntityType.GUARDIAN));
		registry.register(HOGLIN, new Dna(EntityType.HOGLIN.getTranslationKey(), false, EntityType.HOGLIN));
		registry.register(HUSK, new Dna(EntityType.HUSK.getTranslationKey(), false, EntityType.HUSK));
		registry.register(MAGMA_CUBE, new Dna(EntityType.MAGMA_CUBE.getTranslationKey(), false, EntityType.MAGMA_CUBE));
		registry.register(PHANTOM, new Dna(EntityType.PHANTOM.getTranslationKey(), false, EntityType.PHANTOM));
		registry.register(PIGLIN_BRUTE, new Dna(EntityType.PIGLIN_BRUTE.getTranslationKey(), false, EntityType.PIGLIN_BRUTE));
		registry.register(PILLAGER, new Dna(EntityType.PILLAGER.getTranslationKey(), false, EntityType.PILLAGER));
		registry.register(RAVAGER, new Dna(EntityType.RAVAGER.getTranslationKey(), false, EntityType.RAVAGER));
		registry.register(SHULKER, new Dna(EntityType.SHULKER.getTranslationKey(), false, EntityType.SHULKER));
		registry.register(SILVERFISH, new Dna(EntityType.SILVERFISH.getTranslationKey(), false, EntityType.SILVERFISH));
		registry.register(SLIME, new Dna(EntityType.SLIME.getTranslationKey(), false, EntityType.SLIME));
		registry.register(STRAY, new Dna(EntityType.STRAY.getTranslationKey(), false, EntityType.STRAY));
		registry.register(VEX, new Dna(EntityType.VEX.getTranslationKey(), false, EntityType.VEX));
		registry.register(VINDICATOR, new Dna(EntityType.VINDICATOR.getTranslationKey(), false, EntityType.VINDICATOR));
		registry.register(WARDEN, new Dna(EntityType.WARDEN.getTranslationKey(), false, EntityType.WARDEN));
		registry.register(WITCH, new Dna(EntityType.WITCH.getTranslationKey(), false, EntityType.WITCH));
		registry.register(WITHER_SKELETON, new Dna(EntityType.WITHER_SKELETON.getTranslationKey(), false, EntityType.WITHER_SKELETON));
		registry.register(ZOGLIN, new Dna(EntityType.ZOGLIN.getTranslationKey(), false, EntityType.ZOGLIN));
		registry.register(ZOMBIE_VILLAGER, new Dna(EntityType.ZOMBIE_VILLAGER.getTranslationKey(), false, EntityType.ZOMBIE_VILLAGER));
	}
}
